//
//	Филимонов И.В.
//		+7 913 240 81 77
//		
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ТекущаяДата = ТекущаяДатаСеанса();

	АвтомобильКлиента = Параметры.Ключ;

	Если Не АвтомобильКлиента.Пустая() Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("АвтомобильКлиента", АвтомобильКлиента);
		
		// Заполняем регистрационные данные
		Запрос.Текст = "ВЫБРАТЬ
					   |	АС2_АвтомобилиКлиентовСрезПоследних.Период КАК РегистрационныеДанныеНаДату,
					   |	АС2_АвтомобилиКлиентовСрезПоследних.РегистрационныйЗнак КАК РегистрационныйЗнак,
					   |	АС2_АвтомобилиКлиентовСрезПоследних.Собственник КАК Собственник
					   |ИЗ
					   |	РегистрСведений.АС2_АвтомобилиКлиентов.СрезПоследних(, АвтомобильКлиента = &АвтомобильКлиента) КАК
					   |		АС2_АвтомобилиКлиентовСрезПоследних";

		РегистрационныеДанные = Запрос.Выполнить().Выбрать();

		Если РегистрационныеДанные.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, РегистрационныеДанные);
		Иначе
			РегистрационныеДанныеНаДату = ТекущаяДата;
		КонецЕсли;

		// Заполняем пробег
		Запрос.Текст = "ВЫБРАТЬ
					   |	АС2_ПробегАвтомобилейКлиентовСрезПоследних.Период КАК ПробегНаДату,
					   |	АС2_ПробегАвтомобилейКлиентовСрезПоследних.Пробег КАК Пробег
					   |ИЗ
					   |	РегистрСведений.АС2_ПробегАвтомобилейКлиентов.СрезПоследних(, АвтомобильКлиента = &АвтомобильКлиента) КАК
					   |		АС2_ПробегАвтомобилейКлиентовСрезПоследних";
		ДанныеПробега = Запрос.Выполнить().Выбрать();

		Если ДанныеПробега.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеПробега);
		Иначе
			ПробегНаДату = ТекущаяДата;
		КонецЕсли;

	Иначе

		ПробегНаДату = ТекущаяДата;
		РегистрационныеДанныеНаДату = ТекущаяДата;

	КонецЕсли;

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохранение регистрационных данных
	Если Не Собственник.Пустая() Или Не ПустаяСтрока(РегистрационныйЗнак) Тогда
		СохранитьРегистрационныеДанные = РегистрыСведений.АС2_АвтомобилиКлиентов.СоздатьМенеджерЗаписи();
		СохранитьРегистрационныеДанные.АвтомобильКлиента = ТекущийОбъект.Ссылка;
		СохранитьРегистрационныеДанные.Собственник = Собственник;
		СохранитьРегистрационныеДанные.РегистрационныйЗнак = РегистрационныйЗнак;
		СохранитьРегистрационныеДанные.Период = РегистрационныеДанныеНаДату;
		СохранитьРегистрационныеДанные.Записать(Истина);
	КонецЕсли;

	// Сохранение показаний одометра
	Если Пробег > 0 Тогда
		СохранитьПробег = РегистрыСведений.АС2_ПробегАвтомобилейКлиентов.СоздатьМенеджерЗаписи();
		СохранитьПробег.АвтомобильКлиента = ТекущийОбъект.Ссылка;
		СохранитьПробег.Пробег = Пробег;
		СохранитьПробег.Период = ПробегНаДату;
		СохранитьПробег.Записать(Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СформироватьНаименование(Элемент)

	Объект.Наименование = ?(Не ПустаяСтрока(РегистрационныйЗнак), "[" + РегистрационныйЗнак + "]", "Инкогнито");

	Модифицированность = Истина;
	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ИсторияИзмененияРегистрационныхДанных(Команда)

	ПараметрыОткрытия = ОтборПоАвтомобилюКлиента();

	ОткрытьФорму("РегистрСведений.АС2_АвтомобилиКлиентов.Форма.ФормаСписка",
				 ПараметрыОткрытия,
				 ЭтаФорма,
				 КлючУникальности,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры



&НаКлиенте
Процедура ИсторияИзмененияПробега(Команда)
	
	ПараметрыОткрытия = ОтборПоАвтомобилюКлиента();

	ОткрытьФорму("РегистрСведений.АС2_ПробегАвтомобилейКлиентов.Форма.ФормаСписка",
				 ПараметрыОткрытия,
				 ЭтаФорма,
				 КлючУникальности,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ОтборПоАвтомобилюКлиента()

	ПараметрыОтбор = Новый Структура("АвтомобильКлиента", Объект.Ссылка);
	ПараметрыОткрытия = Новый Структура("Отбор", ПараметрыОтбор);
	
	Возврат ПараметрыОткрытия
	
КонецФункции

#КонецОбласти